name: .NET Test and Coverage

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.x.x'

    - name: Restore dependencies
      run: |
        cd ./ServiceResponse
        dotnet restore
      working-directory: ./ServiceResponse

    - name: Build and test
      run: dotnet test --configuration Release --logger trx
      working-directory: ./ServiceResponse

    - name: Upload test results
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: |
          ./ServiceResponse/TestResults/*.trx

    - name: Generate coverage report
      run: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
      working-directory: ./ServiceResponse

    - name: Upload coverage report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: ./ServiceResponse/coverage.opencover.xml

    - name: Set author email
      run: |
        echo "USER_EMAIL=${{ github.event.head_commit.author.email }}" >> $GITHUB_ENV

    - name: Install Codecov
      run: |
        curl -s https://codecov.io/bash > codecov
        chmod +x codecov

    - name: Upload coverage to Codecov
      run: |
        ./codecov -t ${{ secrets.CODECOV_TOKEN }} -f "./ServiceResponse/coverage.opencover.xml" -X gcov

    - name: Generate coverage badge
      run: |
        COVERAGE=$(curl -s https://codecov.io/api/gh/${{ github.repository }} | jq -r '.commit.totals.c')
        COLOR="brightgreen"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then COLOR="yellow"; fi
        if (( $(echo "$COVERAGE < 60" | bc -l) )); then COLOR="orange"; fi
        if (( $(echo "$COVERAGE < 40" | bc -l) )); then COLOR="red"; fi
        echo "![codecov](https://img.shields.io/badge/coverage-$COVERAGE%25-$COLOR)" > badge.md
        echo "::set-output name=badge::$(cat badge.md)"

    - name: Commit and push badge
      uses: EndBug/add-and-commit@v7
      with:
        author_name: "Your Name"
        author_email: ${{ env.USER_EMAIL }}
        message: "chore: update coverage badge"
        add: .
        force: true
        push: true

    - name: Get badge URL
      id: get_badge
      run: |
        echo "::set-output name=badge_url::$(cat badge.md)"

    - name: Comment on pull request
      uses: actions/github-script@v4
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.ACCESS_TOKEN }}
        script: |
          const { data: pullRequest } = await github.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          const commentBody =
